import { validateNumber } from "@src/utils/validation";
import { penTool } from "@src/core/tools/tools";
import Tool from "@src/core/tools/tool";
import Color from "@src/services/color-service";
import EventBus from "@src/services/event-bus";

/**
 * Class for managing the canvas tools and their functionalities
 * @class
 */
class ToolManager {
    // private drawColor: Color;
    // private eraseColor: Color;
    // private drawSize: number;
    // private eraseSize: number;
    // private tolerance: number;
    // private intensity: number;
    private image: ImageData;
    //
    // private startPixel = null;
    // private recentPixel = null;
    // private isActionStart = false;
    // private toolName;
    //
    // private metaData;
    //
    // private recentRect = new ChangeRegion();
    // private currentRect = new ChangeRegion();


    private tools: Map<string, Tool>;
    private selectedTool: Tool;

    /*
     * Creates a ToolManager class that manages tools for the canvas, and applies their functionalities to the layerSystem and drawingManager, and renders the result to canvasManager
     * @constructor
     * @param {CanvasManager} canvasManager - the canvasManager that will be rendered to
     * @param {LayerSystem} layerSystem - the layerSystem that the tool will be applied to
     * @param {DrawingManager} drawingManager - the drawingManager that tool will be rendered to
     */
    constructor(events: EventBus) {
        this.tools = new Map([
            ["pen", penTool],
        ]);
        Tool.image = this.image;
        this.selectedTool = this.tools.get("pen");

        this.setupEvents(events);
    }

    // setDrawingColor(color: Color) {
    //     this.drawColor = color;
    // }
    //
    // setErasingColor(color: Color) {
    //     this.eraseColor = color;
    // }
    //
    // setDrawingSize(size: number) {
    //     validateNumber(size, "Size", { start: 1, integerOnly: true });
    //     this.drawSize = size;
    // }
    //
    // setErasingSize(size: number) {
    //     validateNumber(size, "Size", { start: 1, integerOnly: true });
    //     this.eraseSize = size;
    // }
    //
    // setTolerance(tolerance: number) {
    //     validateNumber(tolerance, "Tolerance", { start: 1, integerOnly: true });
    //     this.tolerance = tolerance;
    // }
    //
    // setIntensity(intensity: number) {
    //     validateNumber(intensity, "Intensity", { start: 1, integerOnly: true });
    //     this.intensity = intensity;
    // }
    //
    // use(event: string, pixelPosition: {x: number, y: number}) {
    //     let metaData;
    //     let command;
    //     switch (this.toolName) {
    //         case "pen":
    //             metaData = {
    //                 size: this.drawSize,
    //                 color: this.drawColor,
    //             };
    //             break;
    //         case "eraser":
    //             metaData = {
    //                 size: this.eraseSize,
    //                 color: this.eraseColor,
    //             };
    //             break;
    //         case "line":
    //             metaData = {
    //                 thicknessTimeFunction: () => this.drawSize,
    //                 color: this.drawColor,
    //             };
    //             break;
    //         case "bucket":
    //             metaData = {
    //                 tolerance: this.tolerance,
    //                 color: this.drawColor,
    //             };
    //             break;
    //     }
    //
    //     switch (event) {
    //         case "start-action":
    //             this.drawingTool.startAction(this.toolName, metaData);
    //             // this.#events.emit("layer:preview", {
    //             //     this.#drawingTool.action(pixelPosition)
    //             // });
    //             this.render(this.drawingTool.action(pixelPosition));
    //             break;
    //         case "move-action":
    //             // this.#events.emit("layer:repreview", {
    //             //     this.#drawingTool.action(pixelPosition)
    //             // });
    //             this.render(this.drawingTool.action(pixelPosition));
    //             break;
    //         case "mousehover":
    //             //this.render(this.#drawingManager.preview(pixelPosition));
    //             break;
    //         case "end-action":
    //             // this.#events.emit("layer:perform", {
    //             //     this.#drawingTool.action(pixelPosition)
    //             // });
    //             //this.render(this.#drawingManager.action(pixelPosition));
    //             // ended action
    //             this.drawingTool.endAction();
    //             break;
    //         case "eye-dropper":
    //             // !!!
    //             break;
    //     }
    // }

    // render(toRender) {
    //     if (toRender.pixelPositions.length == 0) return;
    //
    //     // this.#canvasManager.render(
    //     //     this.#layerManager.getRenderImage(
    //     //         this.#canvasManager.getCanvasContext,
    //     //         toRender,
    //     //     ),
    //     //     toRender.dimensions.x0,
    //     //     toRender.dimensions.y0,
    //     // );
    // }

    setupEvents(events: EventBus) {
        events.subscribe("tool:use", 5, (details) => {
            this.selectedTool;
        });
    }
}

export default ToolManager;

/**
 * draws pixel at position (x, y) with a specific diameter
 * @method
 * @param params 
 * @param params.x - x position
 * @param params.y - y position
 * @param [params.diameter=1] - Diameter for drawing the pixel, minimum = 1
 * @param [params.isSquare=true] - Draws a square pixel with side = radius, draws in a circle shape otherwise
 * @throws {TypeError} - if x or y are not integers
 * @throws {RangeError} - if diameter is less than 1
 */
function drawPixel({ x, y, diameter = 1, isSquare = true, setPixel }: {
    x: number,
    y: number,
    diameter?: number,
    isSquare?: boolean,
    setPixel: (x: number, y: number) => void
}) {
    console.log(x, y);
    validateNumber(x, "x", { integerOnly: true });
    validateNumber(y, "y", { integerOnly: true });
    validateNumber(diameter, "Diameter", { start: 1 });

    diameter = Math.floor(diameter);
    const radius = Math.floor(0.5 * diameter); // Pre-calculate radius
    const radiusSquared = radius * radius; // Pre-calculate radius squared for performance
    const startX = x - radius;
    const startY = y - radius;
    const endX = Math.max(x + 1, x + radius);
    const endY = Math.max(y + 1, y + radius);

    if (isSquare)
        // For squared area
        for (let currentY = startY; currentY < endY; currentY++)
            for (let currentX = startX; currentX < endX; currentX++) {
                setPixel(currentX, currentY);
            }
    else
        // For circular area
        for (let currentY = startY; currentY < endY; currentY++)
            for (let currentX = startX; currentX < endX; currentX++) {
                const dx = x - currentX - 0.5;
                const dy = y - currentY - 0.5;

                if (dx * dx + dy * dy <= radiusSquared) {
                    setPixel(currentX, currentY);
                }
            }
}

